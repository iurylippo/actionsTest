name: Fastmanager CI

on:
  push:
    branches:
      - 'feature/*'
  pull_request:
    branches:
      - master
      - develop
jobs:
  # run_tests:
  #   name: Lumen (PHP ${{ matrix.php-versions }})
  #   runs-on: ubuntu-latest
  #   env:
  #     DB_DATABASE: lumen
  #     DB_USERNAME: root
  #     DB_PASSWORD: secret
  #   services:
  #     mysql:
  #       image: mysql:5.7
  #       env:
  #         MYSQL_ALLOW_EMPTY_PASSWORD: false
  #         MYSQL_ROOT_PASSWORD: secret
  #         MYSQL_DATABASE: lumen
  #         MYSQL_USERNAME: root
  #       ports:
  #         - 3306/tcp
  #       options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       php-versions: ['7.3']
  #   if: github.event_name == 'pull_request'
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Setup PHP, with composer and extensions
  #       uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
  #       with:
  #         php-version: ${{ matrix.php-versions }}
  #         extensions: mbstring, dom, fileinfo, mysql, php-zip
  #         coverage: xdebug #optional
  #     - name: Start mysql service
  #       run: sudo /etc/init.d/mysql start
  #     - name: Get composer cache directory
  #       id: composer-cache
  #       run: echo "::set-output name=dir::$(composer config cache-files-dir)"
  #     - name: Cache composer dependencies
  #       uses: actions/cache@v1
  #       with:
  #         path: ${{ steps.composer-cache.outputs.dir }}
  #         key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
  #         restore-keys: ${{ runner.os }}-composer-
  #     - name: Install Composer dependencies
  #     # composer require predis/predis illuminate/redis
  #       run: |
  #         composer dump-autoload
  #     - name: Prepare the application
  #       run: php -r "file_exists('.env') || copy('.env.example', '.env');"
  #     # - name: Register Redis as service provider
  #       # run: sed -i '$i\$app->register(Illuminate\\Redis\\RedisServiceProvider::class);' bootstrap/app.php
  #     - name: Run Migration
  #       run: php artisan migrate -v
  #       env:
  #         DB_PORT: ${{ job.services.mysql.ports['3306'] }}
  #     - name: Test with phpunit
  #       run: php ./vendor/phpunit/phpunit/phpunit
  #       env:
  #         DB_PORT: ${{ job.services.mysql.ports['3306'] }}
  runs_code_standard:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      # - name: Setup PHP, with composer and extensions
      #   uses: shivammathur/setup-php@v2
      #   with:
      #     php-version: '7.4'
      #     extensions: mbstring, dom, fileinfo, mysql, php-zip
      #     coverage: xdebug #optional
      - name: Checkout
        uses: actions/checkout@v2
      # - name: Get composer cache directory
      #   id: composer-cache
      #   run: |
      #     composer config cache-files-dir
      #     echo "::set-output name=dir::$(composer config cache-files-dir)"
      # - name: Cache composer dependencies
      #   uses: actions/cache@v1
      #   with:
      #     path: ${{ steps.composer-cache.outputs.dir }}
      #     key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
      #     restore-keys: ${{ runner.os }}-composer-
      # - name: Composer runs Dump autoload
      #   run: composer dump-autoload
      - name: Installing PHPCS
        run: |
          composer global require "squizlabs/php_codesniffer=*"
      - name: Runs PHPCS Rules
        run: phpcs

